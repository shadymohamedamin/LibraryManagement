@* @using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@{
    ViewData["Title"] = "Books";
}

<h2>@ViewData["Title"]</h2>

@if (SignInManager.IsSignedIn(User))
{
    var currentUser = await UserManager.GetUserAsync(User);
    
    @if (currentUser != null && await UserManager.IsInRoleAsync(currentUser, "Admin"))
    {
        <p>
            <a asp-action="Create" class="btn btn-primary">Add New Book</a>
        </p>
    }
}

<table class="table table-striped">
    <thead>
        <tr>
            <th>Name</th>
            <th>Total Copies</th>
            <th>Available Copies</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody id="booksTableBody">
        @foreach (var item in Model)
        {
            <tr id="book-@item.Id">
                <td>@item.Name</td>
                <td>@item.TotalCopies</td>
                <td id="availableCopies-@item.Id">@item.AvailableCopies</td>
                <td>
                    @if (item.AvailableCopies > 0)
                    {
                        <button type="button" class="btn btn-primary borrow-button" data-id="@item.Id">Borrow</button>
                    }
                    else
                    {
                        <button type="button" class="btn btn-primary" disabled>Borrow</button>
                    }
                    @if (SignInManager.IsSignedIn(User))
                    {
                        var currentUser = await UserManager.GetUserAsync(User);
                        @if (currentUser != null && await UserManager.IsInRoleAsync(currentUser, "Admin"))
                        {
                            <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-warning">Edit</a>
                        }
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script>
        document.querySelectorAll('.borrow-button').forEach(button => {
            button.addEventListener('click', async (e) => {
                const bookId = e.target.getAttribute('data-id');

                try {
                    const response = await fetch(`/Books/Borrow`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        },
                        body: JSON.stringify({ bookId: bookId })
                    });

                    if (response.ok) {
                        const result = await response.json();
                        const row = document.querySelector(`#book-${bookId}`);
                        if (row) {
                            row.querySelector(`#availableCopies-${bookId}`).textContent = result.availableCopies;
                            if (result.availableCopies <= 0) {
                                e.target.disabled = true;
                            }
                        }
                    } else {
                        alert('Error borrowing the book.');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert('Error borrowing the book.');
                }
            });
        });
    </script>
} *@




@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager

@model IEnumerable<Book>

@{
    ViewData["Title"] = "Books";
}

<h2>@ViewData["Title"]</h2>

@if (SignInManager.IsSignedIn(User))
{
    var currentUser = await UserManager.GetUserAsync(User);
    
    @if (currentUser != null && await UserManager.IsInRoleAsync(currentUser, "Admin"))
    {
        <p>
            <a asp-action="Create" class="btn btn-primary">Add New Book</a>
        </p>
    }
}

<table class="table table-striped">
    <thead>
        <tr>
            <th>Name</th>
            <th>Total Copies</th>
            <th>Available Copies</th>
            <th></th>
        </tr>
    </thead>
    <tbody id="booksTableBody">
        @foreach (var item in Model)
        {
            <tr id="book-@item.Id">
                <td>@item.Name</td>
                <td>@item.TotalCopies</td>
                <td>@item.AvailableCopies</td>
                <td>
                    <button type="button" class="btn btn-primary borrow-btn" data-id="@item.Id" @(item.AvailableCopies <= 0 ? "disabled" : "")>
                        Borrow
                    </button>
                    @if (SignInManager.IsSignedIn(User))
                    {
                        var currentUser = await UserManager.GetUserAsync(User);
                        @if (currentUser != null && await UserManager.IsInRoleAsync(currentUser, "Admin"))
                        {
                            <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-warning">Edit</a>
                        }
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        $(document).ready(function () {
            $('.borrow-btn').click(function () {
                var button = $(this);
                var bookId = button.data('id'); // Ensure this matches your button's data attribute

                // Confirm with the user before making the request
                if (!confirm("Are you sure you want to borrow this book?")) {
                    return;
                }

                $.ajax({
                    url: '@Url.Action("Borrow", "Books")', // Endpoint for the Borrow action
                    type: 'POST',
                    data: JSON.stringify({ bookId: bookId }), // Send data as JSON string
                    contentType: 'application/json', // Set content type to JSON
                    success: function (response) {
                        if (response.success) {
                            updateTable(); // Refresh the table
                        } else {
                            console.error('Server response indicates failure:', response.message);
                            $('#error-message').text('Error: ' + response.message).show();
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error('Error occurred:', {
                            status: status,
                            error: error,
                            responseText: xhr.responseText
                        });

                        $('#error-message').text('An error occurred: ' + xhr.responseText).show();
                    }
                });

                // Optionally disable the button if no copies are available
                if (button.data('available-copies') <= 0) {
                    button.prop('disabled', true).text('Out of Stock');
                }
            });
        });

        function updateTable() {
            // Reload the table contents using AJAX or any other method
            $.ajax({
                url: '@Url.Action("GetBooks", "Books")', // Example endpoint for fetching books
                type: 'GET',
                success: function (data) {
                    // Assume you have a method to update the table with new data
                    $('#booksTableBody').html(data); // Replace with actual data update logic
                },
                error: function (xhr, status, error) {
                    console.error('Error occurred while updating table:', {
                        status: status,
                        error: error,
                        responseText: xhr.responseText
                    });
                }
            });
        }
    </script>
}

