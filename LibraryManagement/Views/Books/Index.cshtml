@* @using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@{
    ViewData["Title"] = "Books";
}

<h2>@ViewData["Title"]</h2>

@if (SignInManager.IsSignedIn(User))
{
    var currentUser = await UserManager.GetUserAsync(User);
    
    @if (currentUser != null && await UserManager.IsInRoleAsync(currentUser, "Admin"))
    {
        <p>
            <a asp-action="Create" class="btn btn-primary">Add New Book</a>
        </p>
    }
}

<table class="table table-striped">
    <thead>
        <tr>
            <th>Name</th>
            <th>Total Copies</th>
            <th>Available Copies</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody id="booksTableBody">
        @foreach (var item in Model)
        {
            <tr id="book-@item.Id">
                <td>@item.Name</td>
                <td>@item.TotalCopies</td>
                <td id="availableCopies-@item.Id">@item.AvailableCopies</td>
                <td>
                    @if (item.AvailableCopies > 0)
                    {
                        <button type="button" class="btn btn-primary borrow-button" data-id="@item.Id">Borrow</button>
                    }
                    else
                    {
                        <button type="button" class="btn btn-primary" disabled>Borrow</button>
                    }
                    @if (SignInManager.IsSignedIn(User))
                    {
                        var currentUser = await UserManager.GetUserAsync(User);
                        @if (currentUser != null && await UserManager.IsInRoleAsync(currentUser, "Admin"))
                        {
                            <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-warning">Edit</a>
                        }
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script>
        document.querySelectorAll('.borrow-button').forEach(button => {
            button.addEventListener('click', async (e) => {
                const bookId = e.target.getAttribute('data-id');

                try {
                    const response = await fetch(`/Books/Borrow`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        },
                        body: JSON.stringify({ bookId: bookId })
                    });

                    if (response.ok) {
                        const result = await response.json();
                        const row = document.querySelector(`#book-${bookId}`);
                        if (row) {
                            row.querySelector(`#availableCopies-${bookId}`).textContent = result.availableCopies;
                            if (result.availableCopies <= 0) {
                                e.target.disabled = true;
                            }
                        }
                    } else {
                        alert('Error borrowing the book.');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert('Error borrowing the book.');
                }
            });
        });
    </script>
} *@




@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager

@model IEnumerable<Book>

@{
    ViewData["Title"] = "Books";
}

<h2>@ViewData["Title"]</h2>

@if (SignInManager.IsSignedIn(User))
{
    var currentUser = await UserManager.GetUserAsync(User);
    
    @if (currentUser != null && await UserManager.IsInRoleAsync(currentUser, "Admin"))
    {
        <p>
            <a asp-action="Create" class="btn btn-primary">Add New Book</a>
        </p>
    }
}

<table class="table table-striped">
    <thead>
        <tr>
            <th>Name</th>
            <th>Total Copies</th>
            <th>Available Copies</th>
            <th></th>
        </tr>
    </thead>
    <tbody id="booksTableBody">
        @foreach (var item in Model)
        {
            <tr id="book-@item.Id">
                <td>@item.Name</td>
                <td>@item.TotalCopies</td>
                <td>@item.AvailableCopies</td>
                <td>
                    @* <button type="button" class="btn btn-primary borrow-btn" data-id="@item.Id" @(item.AvailableCopies <= 0 ? "disabled" : "")>
                        Borrow
                    </button> *@
                    <form id="borrowForm-@item.Id" method="post" action="@Url.Action("Borrow", "Books")">
                        <input type="hidden" name="bookId" value="@item.Id" />
                        <button type="submit" class="btn btn-primary borrow-btn">Borrow</button>
                    </form>
                    @if (SignInManager.IsSignedIn(User))
                    {
                        var currentUser = await UserManager.GetUserAsync(User);
                        @if (currentUser != null && await UserManager.IsInRoleAsync(currentUser, "Admin"))
                        {
                            <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-warning">Edit</a>
                            <a class="btn btn-info" asp-action="BookDetails" asp-route-id="@item.Id">View Details</a>
                        }
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
        document.querySelectorAll('form').forEach(form => {
            form.addEventListener('submit', async (e) => {
                e.preventDefault(); // Prevent the default form submission

                const formData = new FormData(form);
                const response = await fetch(form.action, {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                });

                if (response.ok) {
                    location.reload();
                    // Redirect to /MyBooks on success
                    //window.location.href = '/MyBooks';
                } else {
                    alert('Error borrowing the book.');
                }
            });
        });
    </script>
}
